{"name": "test_studyTimeEnough", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command.", "trace": "self = <scripts.test_041_studyTime.Test_studyTime object at 0x00000231ABBB6F70>\n\n    def test_studyTimeEnough(self):\n        with allure.step('计时一分钟暂停继续学习时点击结束'):\n            with allure.step('进入更多页'):\n                self.page.more().click_more()\n            with allure.step('点击自律工具'):\n                self.page.timing().click_studyTools()\n            with allure.step('点击普通计时'):\n                self.page.timing().click_normalTiming()\n            with allure.step('输入学习内容'):\n                self.page.timing().input_normalLearningTargetBox(12345)\n            with allure.step('点击设置按钮'):\n                self.page.timing().click_studySettingBtn()\n            with allure.step('设置学习时长'):\n                time.sleep(3)\n                self.page.more().swipeByTime()\n            with allure.step('点击设置完成按钮'):\n                self.page.timing().click_studySettingsuccessBtn()\n            with allure.step('点击开始学习'):\n                self.page.timing().click_startTimingBtn()\n            with allure.step('暂停学习'):\n                time.sleep(2)\n                self.page.classic_timing().click_timingPause()\n                time.sleep(2)\n            with allure.step('点击继续'):\n                self.page.classic_timing().click_timingContinue()\n            with allure.step('判断时间到了结束弹窗'):\n                time.sleep(55)\n                assert self.page.classic_timing().check_timingDialog() == True\n            with allure.step('点击我知道了'):\n                self.page.classic_timing().click_timingDialog()\n            with allure.step('点击再学30分钟'):\n                time.sleep(1)\n                self.page.classic_timing().tapScreen(0.08, 0.966)\n                time.sleep(1)\n                self.page.classic_timing().tapScreen(0.08, 0.966)\n                self.page.classic_timing().click_timingAgain_30()\n                time.sleep(2)\n                self.page.classic_timing().tapScreen(0.08, 0.966)\n                time.sleep(1)\n                self.page.classic_timing().tapScreen(0.08, 0.966)\n            with allure.step('点击结束'):\n                self.page.classic_timing().click_timingEnd()\n            with allure.step('确认结束'):\n                self.page.classic_timing().click_timingEndYes()\n            with allure.step('判断是否是第一次计时'):\n                if self.page.classic_timing().check_timingEndDialog() == True:\n                    assert True\n                else:\n>                   self.page.classic_timing().tapScreen(0.071, 0.098)\n\ntest_041_studyTime.py:126: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\Pages\\timed_learning\\classic_timing_page.py:127: in tapScreen\n    self.driver.tap([(L[0]*x,L[1]*y)],1)\nc:\\python38\\lib\\site-packages\\appium\\webdriver\\extensions\\action_helpers.py:96: in tap\n    action.perform()\nc:\\python38\\lib\\site-packages\\appium\\webdriver\\common\\touch_action.py:149: in perform\n    self._driver.execute(Command.TOUCH_ACTION, params)\nc:\\python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\nc:\\python38\\lib\\site-packages\\appium\\webdriver\\errorhandler.py:31: in check_response\n    raise wde\nc:\\python38\\lib\\site-packages\\appium\\webdriver\\errorhandler.py:26: in check_response\n    super().check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x00000231ABBB6520>\nresponse = {'status': 500, 'value': '{\"status\":13,\"value\":{\"message\":\"An unknown server-side error occurred while processing the command.\",\"origValue\":\"Failed to execute touch event\"},\"sessionId\":\"b215acf4-72e9-45af-8972-cc9305d12128\"}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command.\n\nc:\\python38\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: WebDriverException"}, "steps": [{"name": "计时一分钟暂停继续学习时点击结束", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command.\n\n", "trace": "  File \"D:\\Jenkins\\workspace\\Timing\\scripts\\test_041_studyTime.py\", line 126, in test_studyTimeEnough\n    self.page.classic_timing().tapScreen(0.071, 0.098)\n  File \"D:\\Jenkins\\workspace\\Timing\\Pages\\timed_learning\\classic_timing_page.py\", line 127, in tapScreen\n    self.driver.tap([(L[0]*x,L[1]*y)],1)\n  File \"c:\\python38\\lib\\site-packages\\appium\\webdriver\\extensions\\action_helpers.py\", line 96, in tap\n    action.perform()\n  File \"c:\\python38\\lib\\site-packages\\appium\\webdriver\\common\\touch_action.py\", line 149, in perform\n    self._driver.execute(Command.TOUCH_ACTION, params)\n  File \"c:\\python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 321, in execute\n    self.error_handler.check_response(response)\n  File \"c:\\python38\\lib\\site-packages\\appium\\webdriver\\errorhandler.py\", line 31, in check_response\n    raise wde\n  File \"c:\\python38\\lib\\site-packages\\appium\\webdriver\\errorhandler.py\", line 26, in check_response\n    super().check_response(response)\n  File \"c:\\python38\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 242, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "steps": [{"name": "进入更多页", "status": "passed", "start": 1612029040265, "stop": 1612029046458}, {"name": "点击自律工具", "status": "passed", "start": 1612029046458, "stop": 1612029048344}, {"name": "点击普通计时", "status": "passed", "start": 1612029048344, "stop": 1612029049998}, {"name": "输入学习内容", "status": "passed", "start": 1612029049998, "stop": 1612029055682}, {"name": "点击设置按钮", "status": "passed", "start": 1612029055682, "stop": 1612029056526}, {"name": "设置学习时长", "status": "passed", "start": 1612029056526, "stop": 1612029059788}, {"name": "点击设置完成按钮", "status": "passed", "start": 1612029059788, "stop": 1612029060356}, {"name": "点击开始学习", "status": "passed", "start": 1612029060356, "stop": 1612029061082}, {"name": "暂停学习", "status": "passed", "start": 1612029061082, "stop": 1612029065603}, {"name": "点击继续", "status": "passed", "start": 1612029065603, "stop": 1612029065776}, {"name": "判断时间到了结束弹窗", "status": "passed", "start": 1612029065777, "stop": 1612029124603}, {"name": "点击我知道了", "status": "passed", "start": 1612029124603, "stop": 1612029127774}, {"name": "点击再学30分钟", "status": "passed", "start": 1612029127774, "stop": 1612029133791}, {"name": "点击结束", "status": "passed", "start": 1612029133791, "stop": 1612029134706}, {"name": "确认结束", "status": "passed", "start": 1612029134706, "stop": 1612029135745}, {"name": "判断是否是第一次计时", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command.\n\n", "trace": "  File \"D:\\Jenkins\\workspace\\Timing\\scripts\\test_041_studyTime.py\", line 126, in test_studyTimeEnough\n    self.page.classic_timing().tapScreen(0.071, 0.098)\n  File \"D:\\Jenkins\\workspace\\Timing\\Pages\\timed_learning\\classic_timing_page.py\", line 127, in tapScreen\n    self.driver.tap([(L[0]*x,L[1]*y)],1)\n  File \"c:\\python38\\lib\\site-packages\\appium\\webdriver\\extensions\\action_helpers.py\", line 96, in tap\n    action.perform()\n  File \"c:\\python38\\lib\\site-packages\\appium\\webdriver\\common\\touch_action.py\", line 149, in perform\n    self._driver.execute(Command.TOUCH_ACTION, params)\n  File \"c:\\python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 321, in execute\n    self.error_handler.check_response(response)\n  File \"c:\\python38\\lib\\site-packages\\appium\\webdriver\\errorhandler.py\", line 31, in check_response\n    raise wde\n  File \"c:\\python38\\lib\\site-packages\\appium\\webdriver\\errorhandler.py\", line 26, in check_response\n    super().check_response(response)\n  File \"c:\\python38\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 242, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1612029135745, "stop": 1612029187144}], "start": 1612029040265, "stop": 1612029187145}], "start": 1612029040265, "stop": 1612029187146, "uuid": "f904f894-0328-48c5-8ddb-ba4f05495b17", "historyId": "70d7f22222b00c9c58e75e109c489323", "testCaseId": "d83396f78150f742027f49d5a35e9c09", "fullName": "test_041_studyTime.Test_studyTime#test_studyTimeEnough", "labels": [{"name": "suite", "value": "test_041_studyTime"}, {"name": "subSuite", "value": "Test_studyTime"}, {"name": "host", "value": "WINDOWS-49AO44L"}, {"name": "thread", "value": "13008-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_041_studyTime"}]}